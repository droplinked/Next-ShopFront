import { cn } from "@/lib/utils/cn/cn";
import { IAppDropDown, IAppInput } from "./interfaces";
import { Avenir } from "@/styles/fonts";
import dynamic from "next/dynamic";
import { app_vertical } from "@/lib/variables/variables";
import AppTypography from "../typography/AppTypography";

const AppSelect = dynamic(() => import("react-select"), { ssr: false });
export const AppInput = ({ right, left, placeholder, label, inputType = "text", appClassName, ...props }: IAppInput) => <div className={cn(app_vertical, "w-full gap-2 items-start")}>{label && <AppTypography appClassName="font-normal text-sm">{label}</AppTypography>}<div className={cn("border border-secondary flex items-stretch w-full p-3 rounded-sm overflow-hidden", appClassName)}>{left && <div className="flex items-center pr-3">{left}</div>}<input type={inputType} placeholder={placeholder} className={cn(`block bg-transparent w-full focus:outline-none focus:ring-0 appearance-none placeholder:text-placeholder disabled:cursor-not-allowed disabled:opacity-50 text-sm ${Avenir.className}`)}{...props}/>{right && <div className="flex items-center pl-3">{right}</div>}</div></div>
export const AppDropDown = ({ options, select, value, label, placeholder = "Select", disabled = false, typing, isLoading, name, id }: IAppDropDown) => <div className={cn(app_vertical, "w-full gap-2 items-start")}>{label && <AppTypography appClassName="font-normal text-sm">{label}</AppTypography>}<AppSelect name={name} id={id} className={cn(`block bg-transparent w-full placeholder:text-placeholder ${Avenir.className}`)} isDisabled={disabled} placeholder={placeholder} isLoading={isLoading} onInputChange={(event) => (typing ? typing(event) : {})} options={options} value={value} onChange={select} styles={{indicatorSeparator: (baseStyles: any) => ({ ...baseStyles, display: "none" }), control: (baseStyles: any, state) => ({ ...baseStyles, border: `1px solid gray !important`, outline: "none", boxShadow: "none", fontSize: "14px" }), menu: (baseStyles: any) => ({ ...baseStyles, backgroundColor: "white" }), singleValue: (baseStyles: any) => ({ ...baseStyles, color: "black" }), option: (baseStyles: any) => ({ ...baseStyles, background: "none", cursor: "pointer", color: "black", fontSize: "14px", "&:hover": { backgroundColor: "black", color: "white" } })}}/></div>

